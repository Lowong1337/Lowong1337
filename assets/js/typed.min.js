(function ($) {
    "use strict";
  
    class Typed {
      constructor(selector, options) {
        this.el = $(selector);
        this.options = $.extend({}, $.fn.typed.defaults, options);
        this.isInput = this.el.is("input");
        this.attr = this.options.attr;
        this.showCursor = this.isInput ? false : this.options.showCursor;
        this.elContent = this.attr ? this.el.attr(this.attr) : this.el.text();
        this.contentType = this.options.contentType;
        this.typeSpeed = this.options.typeSpeed;
        this.startDelay = this.options.startDelay;
        this.backSpeed = this.options.backSpeed;
        this.backDelay = this.options.backDelay;
        this.strings = this.options.strings;
        this.strPos = 0;
        this.arrayPos = 0;
        this.stopNum = 0;
        this.loop = this.options.loop;
        this.loopCount = this.options.loopCount;
        this.curLoop = 0;
        this.stop = false;
        this.cursorChar = this.options.cursorChar;
        this.shuffle = this.options.shuffle;
        this.sequence = [];
  
        this.build();
      }
  
      init() {
        const self = this;
  
        self.timeout = setTimeout(function () {
          for (let i = 0; i < self.strings.length; ++i) {
            self.sequence[i] = i;
          }
  
          if (self.shuffle) {
            self.sequence = self.shuffleArray(self.sequence);
          }
  
          self.typewrite(self.strings[self.sequence[self.arrayPos]], self.strPos);
        }, self.startDelay);
      }
  
      build() {
        if (this.showCursor === true) {
          this.cursor = $(`<span class="typed-cursor">${this.cursorChar}</span>`);
          this.el.after(this.cursor);
        }
  
        this.init();
      }
  
      typewrite(t, s) {
        if (this.stop !== true) {
          const self = this;
          const delay = Math.round(70 * Math.random()) + this.typeSpeed;
  
          self.timeout = setTimeout(function () {
            let e = 0;
            let r = t.substr(s);
  
            if ("^" === r.charAt(0)) {
              let i = 1;
  
              if (/^\^\d+/.test(r)) {
                r = /\d+/.exec(r)[0];
                i += r.length;
                e = parseInt(r);
              }
  
              t = t.substring(0, s) + t.substring(s + i);
            }
  
            if (self.contentType === "html") {
              const n = t.substr(s).charAt(0);
  
              if ("<" === n || "&" === n) {
                let a = "";
                let h = "";
  
                if ("<" === n) {
                  h = ">";
                } else {
                  h = ";";
                }
  
                while (t.substr(s).charAt(0) !== h) {
                  a += t.substr(s).charAt(0);
                  s++;
                }
  
                s++;
                a += h;
              }
            }
  
            self.timeout = setTimeout(function () {
              if (s === t.length) {
                if (self.options.onStringTyped(self.arrayPos), self.arrayPos === self.strings.length - 1 && (self.options.callback(), self.curLoop++, self.loop === false || self.curLoop === self.loopCount)) {
                  return;
                }
  
                self.timeout = setTimeout(function () {
                  self.backspace(t, s);
                }, self.backDelay);
              } else {
                if (s === 0) {
                  self.options.preStringTyped(self.arrayPos);
                }
  
                const e = t.substr(0, s + 1);
                if (self.attr) {
                  self.el.attr(self.attr, e);
                } else if (self.isInput) {
                  self.el.val(e);
                } else if (self.contentType === "html") {
                  self.el.html(e);
                } else {
                  self.el.text(e);
                }
  
                s++;
                self.typewrite(t, s);
              }
            }, delay);
          }, delay);
        }
      }
  
      backspace(t, s) {
        if (this.stop !== true) {
          const self = this;
          const delay = Math.round(70 * Math.random()) + this.backSpeed;
  
          self.timeout = setTimeout(function () {
            if (self.contentType === "html" && ">" === t.substr(s).charAt(0)) {
              let e = "";
  
              while ("<" !== t.substr(s).charAt(0)) {
                e -= t.substr(s).charAt(0);
                s--;
              }
  
              s--;
              e += "<";
            }
  
            const r = t.substr(0, s);
  
            if (self.attr) {
              self.el.attr(self.attr, r);
            } else if (self.isInput) {
              self.el.val(r);
            } else if (self.contentType === "html") {
              self.el.html(r);
            } else {
              self.el.text(r);
            }
  
            if (s > self.stopNum) {
              s--;
              self.backspace(t, s);
            } else if (s <= self.stopNum) {
              self.arrayPos++;
              if (self.arrayPos === self.strings.length) {
                self.arrayPos = 0;
                if (self.shuffle) {
                  self.sequence = self.shuffleArray(self.sequence);
                }
                self.init();
              } else {
                self.typewrite(self.strings[self.sequence[self.arrayPos]], s);
              }
            }
          }, delay);
        }
      }
  
      shuffleArray(t) {
        let s, e, o = t.length;
  
        if (o) {
          while (--o) {
            e = Math.floor(Math.random() * (o + 1));
            s = t[e];
            t[e] = t[o];
            t[o] = s;
          }
        }
  
        return t;
      }
  
      reset() {
        const id = this.el.attr("id");
        this.el.after(`<span id="${id}"/>`);
        this.el.remove();
  
        if (typeof this.cursor !== "undefined") {
          this.cursor.remove();
        }
  
        this.options.resetCallback();
      }
    }
  
    $.fn.typed = function (options) {
      return this.each(function () {
        const el = $(this);
        let instance = el.data("typed");
        if (typeof options === "object" || !options) {
          el.data("typed", instance = new Typed(this, options));
        }
        if (typeof options === "string") {
          instance[options]();
        }
      });
    };
  
    $.fn.typed.defaults = {
      strings: ["These are the default values...", "You know what you should do?", "Use your own!", "Have a great day!"],
      typeSpeed: 0,
      startDelay: 0,
      backSpeed: 0,
      shuffle: false,
      backDelay: 500,
      loop: false,
      loopCount: false,
      showCursor: true,
      cursorChar: "|",
      attr: null,
      contentType: "html",
      callback: function () { },
      preStringTyped: function () { },
      onStringTyped: function () { },
      resetCallback: function () { },
    };
  })(window.jQuery);
  